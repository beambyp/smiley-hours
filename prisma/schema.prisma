generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAccount {
  email String @unique
  password String 
  Role String
  isApprove Boolean
  userinfo UserInfo[]
  psychologistinfo PsychologistInfo[]
}

model UserInfo {
  email String @unique
  name String
  surname String
  gender String
  dateOfBirth String
  phoneNumber String
  useraccount UserAccount @relation(fields: [email],references: [email])
  appointmentrecord AppointmentRecord[]
  medicalrecord MedicalRecord[]
}

model PsychologistInfo {
  email String @unique
  citizenID String
  name String
  surname String
  phoneNumber String
  licenseNumber String
  psychologistPhoto String?
  gender String
  dateOfBirth String
  address String
  workplace String
  specialization String
  isSpecializeAdult Boolean
  isSpecializeChildAndTeen Boolean
  isSpecializeElder Boolean
  useraccount UserAccount @relation(fields: [email],references: [email])
  appointmentrecord AppointmentRecord[]
  medicalrecord MedicalRecord[]
}

model AppointmentRecord {
  appointmentID Int @id @default(autoincrement())
  userEmail String
  psychologistEmail String
  appointmentDate DateTime
  consentFormID Int?
  symptom String
  isCancel Boolean
  isSuccess Boolean
  isDiagnosis Boolean @default(false)
  createDate DateTime
  psychologistInfo PsychologistInfo @relation(fields: [psychologistEmail],references: [email])
  userInfo UserInfo  @relation(fields: [userEmail],references: [email])
}

model ConsentFormRecord {
  consentFormID Int @id @default(autoincrement())
  userEmail String
  name String
  surname String
  dateSigned DateTime
}

model PsychologistShift {
  shiftID Int @id @default(autoincrement())
  psychologistEmail String
  availableDateStart DateTime
  availableDateEnd DateTime
}

model MedicalRecord {
  recordID Int @id @default(autoincrement())
  userEmail String
  psychologistEmail String
  treatmentDate DateTime
  symptom String @db.VarChar(1024)
  diagnosis String @db.VarChar(1024)
  advice String @db.VarChar(1024)
  psychologistInfo PsychologistInfo @relation(fields: [psychologistEmail],references: [email])
  userInfo UserInfo  @relation(fields: [userEmail],references: [email])
}

model ChatRecord {
  chatID Int @id @default(autoincrement())
  userEmail String
  psychologistEmail String
  message MessageRecord[]
}

model MessageRecord {
  messageID Int @id @default(autoincrement())
  chatID Int
  senderEmail String
  messageContent String
  messageDate DateTime
  chatRecord ChatRecord @relation(fields: [chatID],references: [chatID])
}